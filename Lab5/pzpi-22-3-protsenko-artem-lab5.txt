Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
до лабораторної роботи №5 з дисципліни
«Архітектура програмного забезпечення»
на тему: «РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ»






Виконав
ст. гр. ПЗПІ-22-3
Проценко Артем Романович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович





Харків 2025
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	26.05.2025	0.1	Створено розділ «Історія змін», створено титульний лист. Додано базову структуру серверної частини для доробки
2	28.05.2025	0.1	Створено розділ «Опис виконаної роботи» 
3	28.05.2025	0.1	Створено додаток Б, В.
4	31.05.2025	0.1	Створено відеозапис та наведено в додатку А.
5	31.05.2025	0.1	Створено розділ «Висновки»

2 ХІД РОБОТИ

Метою даної лабораторної роботи є розгортання та демонстрація розробленої програмної системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ

До виконаної роботи було створено відеозвіт, посилання на який наведено у додатку А.
Усі графічні дані наведені у додатку Б.
У межах виконання лабораторної роботи було здійснено комплексне розгортання, тестування та демонстрацію повного циклу функціонування програмної системи, що складається із серверної частини, веб-клієнту, мобільного клієнту та розумного пристрою.
Початковий етап роботи полягав у ознайомленні з метою проєкту, окресленні основних функцій та логіки його реалізації. Після цього було продемонстровано процес завантаження та встановлення серверної частини, а також спеціально розробленого веб-клієнту, який дозволяє користувачам отримати доступ до інсталятора системи. Встановлення здійснювалося із дотриманням усіх процедур ініціалізації, включаючи встановлення необхідних залежностей і компонентів середовища, що є передумовою для коректного запуску програмної системи.
Подальші дії були спрямовані на дослідження працездатності серверної частини. Було проведено тестування базових функціональних можливостей системи, що реалізовані на рівні серверного програмного забезпечення. Зокрема, було перевірено обробку запитів, збереження даних і виконання логіки взаємодії між клієнтською частиною та сервером.
Також було приділено увагу тестуванню апаратного компонента — розумного пристрою, який є важливою частиною екосистеми програмної системи.
На наступному етапі було досліджено веб-клієнт, реалізований як повноцінна частина клієнтського інтерфейсу. Було здійснено вхід до системи та проаналізовано бізнес-логіку, реалізовану у веб-інтерфейсі.
В рамках подальшої роботи було продемонстровано завантаження мобільного клієнта на пристрій користувача. Після встановлення було проведено тестування основних функціональних можливостей мобільного застосунку. Було перевірено взаємодію з серверною частиною, відображення актуальної інформації, виконання користувацьких сценаріїв.
Програмний код окремих компонентів наведено в додатку В.
 
ВИСНОВКИ

В результаті виконання лабораторної роботи була розроблено розгортання програмної системи для автоматизації годування домашніх тварин. Було розроблено веб клієнт та інсталятор для встановлення всіх залежностей для роботи програмної системи було продемонстровано функції програмної системи.
 
ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/5cb-1eHi4OE

Хронологічний опис відеозапису:
00:00 - Привітання. Доповідач вітається, розповідає про загальну мету лабораторної роботи та коротко окреслює, які функції були реалізовані.
00:17 - Завантаження серверної частини та веб клієнту програмної системи. Показується встановлення інсталятора та встановлення залежностей та програмної системи.
02:44 - Тестування серверної частини програмної системи. Тестується працездатність серверної частини програмної системи, показується базові функції програмної системи
04:19 - Тестування розумного пристрої програмної системи. Тестується працездатність розумного пристрою програмної системи.
05:08 - Тестування веб клієнту програмної системи. Тестується працездатність веб клієнту програмної системи, виконується вхід до системи та перевірка функцій бізнес логіки програмної системи.
07:08 - Завантаження мобільного клієнту на пристрій користувача. Показується встановлення мобільного клієнту програмної системи. 
07:41 - Тестування мобільного клієнту програмної системи. Показуються основні функції мобільного клієнту.
09:38 - Висновки. Підбивається підсумок виконаної роботи. 
ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 – ER-діаграма даних
 
Рисунок Б.2 – Структура бази даних
 
Рисунок Б.3 – UML-діаграма прецедентів
 
ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних.

GitHub репозиторій: https://github.com/NureProtsenkoArtem/apz-pzpi-22-3-protsenko-artem/blob/main/Lab5/pzpi-22-3-protsenko-artem-lab5/installer/encrypt_utils.py

 1  from dotenv import load_dotenv
 2  import os
 3  
 4  
 5  #Encrypts or decrypts data using XOR.
 6  def xor_encrypt_decrypt(data, key):
 7      return bytes([data[i] ^ key[i % len(key)] for i in range(len(data))])
 8  
 9  #Encrypts the specified file.
10  def encrypt_file(file_path, key):
11      try:
12          key_bytes = key.encode()
13          with open(file_path, 'rb') as file:
14              data = file.read()
15          encrypted_data = xor_encrypt_decrypt(data, key_bytes)
16          with open(file_path, 'wb') as file:
17              file.write(encrypted_data)
18          print(f"File {file_path} encrypted successfully.")
19      except Exception as e:
20          print(f"Error encrypting file {file_path}: {e}")
21  
22  
23  #Decrypts the specified file.
24  
25  def decrypt_file(file_path, key):
26      try:
27          key_bytes = key
28          with open(file_path, 'rb') as file:
29              encrypted_data = file.read()
30          decrypted_data = xor_encrypt_decrypt(encrypted_data, key_bytes)
31          with open(file_path, 'wb') as file:
32              file.write(decrypted_data)
33          print(f"File {file_path} decrypted successfully.")
34      except Exception as e:
35          print(f"Error decrypting file {file_path}: {e}")
36  
37  #Finds the most recent backup file in the specified directory.
38  
39  def find_latest_backup(directory, extension=".sql"):
40      try:
41          files = [f for f in os.listdir(directory) if f.endswith(extension)]
42          if not files:
43              return None
44          files.sort(key=lambda x: os.path.getmtime(os.path.join(directory, x)), reverse=True)
45          return os.path.join(directory, files[0])
46      except Exception as e:
47          print(f"Error while finding backup files: {e}")
48          return None
49  
50  if __name__ == "__main__":
51      load_dotenv() 
52      script_dir = os.path.dirname(os.path.abspath(__file__))
53      backup_directory = os.path.join(script_dir, "..\PetHouse.Persistence\Migration")
54      backup_directory = os.path.normpath(backup_directory)
55      file_path = find_latest_backup(backup_directory)
56      key = os.getenv('ENCRYPTION_KEY')
57      if not key:
58          print("ENCRYPTION_KEY not found in .env file. Exiting.")
59          exit()
60  
61      action = input("Do you want to (e)ncrypt or (d)ecrypt the file? ").lower()
62      if action == 'e':
63          encrypt_file(file_path, key)
64      elif action == 'd':
65          decrypt_file(file_path, key)
66      else:
67          print("Invalid input. Exiting.")

В.2 Адміністрування бізнес-логіки системи. Панель завантаження системи.

GitHub репозиторій: https://github.com/NureProtsenkoArtem/apz-pzpi-22-3-protsenko-artem/blob/main/Lab5/pzpi-22-3-protsenko-artem-lab5/installer/pages/install_location_page.py

 1  import tkinter as tk
 2  from tkinter import ttk, filedialog, messagebox
 3  import zipfile
 4  import os
 5  import sys
 6  
 7  
 8  if getattr(sys, 'frozen', False):
 9      BASE_DIR = sys._MEIPASS
10  else:
11      BASE_DIR = os.path.dirname(__file__)
12  
13  ZIP_FILE = os.path.join(BASE_DIR, "PetHouseSystem.zip")
14  
15  
16  class InstallLocationPage(tk.Frame):
17      def __init__(self, parent, controller):
18          super().__init__(parent)
19          self.controller = controller
20  
21          self.install_path = tk.StringVar()
22  
23          ttk.Label(self, text="Виберіть шлях для встановлення:",
24                    font=("Arial", 12)).pack(pady=20)
25  
26          path_frame = ttk.Frame(self)
27          path_frame.pack(pady=10)
28          ttk.Entry(path_frame, textvariable=self.install_path,
29                    width=40).pack(side="left")
30          ttk.Button(path_frame, text="Обрати",
31                     command=self.choose_install_path).pack(side="left", padx=5)
32  
33          self.progress = ttk.Progressbar(
34              self, orient="horizontal", length=400, mode="determinate")
35          self.progress.pack(pady=10)
36  
37          self.install_button = ttk.Button(
38              self, text="Розпакувати та завершити", command=self.extract_files)
39          self.install_button.pack(pady=30)
40  
41      def choose_install_path(self):
42          path = filedialog.askdirectory()
43          if path:
44              self.install_path.set(path)
45  
46      def extract_files(self):
47          try:
48              target_dir = self.install_path.get()
49  
50              if not target_dir:
51                  messagebox.showwarning(
52                      "Попередження", "Будь ласка, виберіть шлях для встановлення.")
53                  return
54  
55              with zipfile.ZipFile(ZIP_FILE, 'r') as zip_ref:
56                  files = zip_ref.namelist()
57                  total_files = len(files)
58  
59                  self.progress["value"] = 0
60                  self.progress["maximum"] = total_files
61                  self.update_idletasks()
62  
63                  for i, file in enumerate(files, start=1):
64                      zip_ref.extract(file, target_dir)
65                      self.progress["value"] = i
66                      self.update_idletasks()
67  
68              self.create_run_bat(target_dir)
69  
70              self.controller.show_frame("FinishPage")
71          except Exception as e:
72              messagebox.showerror("Помилка", str(e))
73  
74      def create_run_bat(self, path):
75          desktop = os.path.join(os.path.join(
76              os.environ['USERPROFILE']), 'Desktop')
77  
78          bat_path = os.path.join(desktop, "pethouse runner.bat")
79  
80          with open(bat_path, "w", encoding="utf-8") as bat_file:
81              bat_file.write(f"""@echo off
82  cd /d "{path}\\PetHouseSystem"
83  task run_app
84  pause
85  """)

В.3 Резервне копіювання користувацьких даних. Налагодження бази даних.

GitHub репозиторій: https://github.com/NureProtsenkoArtem/apz-pzpi-22-3-protsenko-artem/blob/main/Lab5/pzpi-22-3-protsenko-artem-lab5/installer/db_setup.py

 1  import subprocess
 2  import os
 3  import sys
 4  
 5  
 6  #Sets up the database by creating it and restoring it from a backup file.
 7  def setup_database(backup_file, db_name="pethouseDB", username="postgres", password="root"):
 8      print("Setting up the database...")
 9  
10      os.environ["PGPASSWORD"] = password 
11  
12      try:
13          check_db_command = ["psql", "-U", username, "-lqt"]
14          check_db_result = subprocess.run(check_db_command, capture_output=True, text=True, check=True, shell=True)
15          if db_name in check_db_result.stdout:
16              print(f"Database {db_name} already exists.")
17          else:
18              create_db_command = ["createdb", "-U", username, db_name]
19              subprocess.run(create_db_command, capture_output=True, text=True, check=True, shell=True)
20              print(f"Database {db_name} created successfully.")
21      except subprocess.CalledProcessError as e:
22          print(f"Failed to check or create the database {db_name}. Error: {e.stderr}")
23          return
24  
25      try:
26          restore_db_command = ["pg_restore", "-U", username, "-d", db_name, backup_file]
27          restore_db_result = subprocess.run(restore_db_command, capture_output=True, text=True, check=True, shell=True)
28          print("Database restored from backup successfully.")
29      except subprocess.CalledProcessError as e:
30          print(f"Failed to restore the database from {backup_file}.")
31          print(f"stdout: {e.stdout}")
32          print(f"stderr: {e.stderr}")
33          return
34      
35      print("Database setup completed successfully.")
36      return True
